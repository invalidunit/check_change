#!/bin/sh -


readonly _command="${0##*/}"
readonly _c_version='0.3.0-1'
export LANG=en_US.UTF-8
_start_time="$(date "+%Y-%m-%d-%H%M%S")"
_path="$(echo "${1}" | sed 's#/$##')"
_crc_path="${_path}/Caches/com.nan.crc"
mkdir -p "${_crc_path}"
readonly _config="$(jq "." "${_path}/Preferences/com.nan.crc.js")"
echo "version: ${_c_version}"

if ! which sw_vers 2>>/dev/null 1>>/dev/null; then
	sw_vers(){
		echo '17.0'
	}
	uname(){
		case "${1}" in
			-m)
				echo 'iPhone14,3'
				;;
			-r)
				echo '23.0.0'
				;;
		esac
	}
	sha256(){
		while IFS= read -r line || [ -n "$line" ]; do
			_incoming="$_incoming$line"'\n'
		done
		_incoming="$(printf '%b\n' "${_incoming}")"
		echo "${_incoming}" | sed 's#^"##' | sed 's#"$##' | sha256sum | awk -F ' ' '{print $1}'
		unset _incoming
	}
fi

_remove_colon(){
	if [ -n "${1}" ]; then
		echo "${1}" | sed 's#^"##' | sed 's#"$##'
	else
		while IFS= read -r line || [ -n "$line" ]; do
			_incoming="$_incoming$line"'\n'
		done
		_incoming="$(printf '%b\n' "${_incoming}")"
		echo "${_incoming}" | sed 's#^"##' | sed 's#"$##'
	fi
	unset _incoming
}

_randnum(){
	if [ -z "${2}" ]; then
		tr -dc 'A-Za-z0-9' < /dev/urandom 2>>/dev/null | head -c "${1}"
	else
		tr -dc "${1}" < /dev/urandom 2>>/dev/null | head -c "${2}"
	fi
}

_parse_package(){
	awk '
BEGIN {
    FS=": ";
    OFS=",";
}
{
    sub(/\r$/, "");
    if ($1 == "Package") package = $2;
    if ($1 == "Name") name = $2;
    if ($1 == "Version") version = $2;
    if ($1 == "Architecture") arch = $2;
}
/^$/ {
    print package, name, version, arch;
    package = name = version = arch = "";
}
END {
    if (package != "" || name != "" || version != "" || arch != "") {
        print package, name, version, arch;
    }
}' "${1}" >"${2}"
}

echo '[*] Reading configuration file...'
_bark_server="$(echo "${_config}" | jq ".bark.server" | _remove_colon | sed 's#^null$##')"
if ! echo "${_bark_server}" | grep -Fq '.'; then
	unset _bark_server
else
	_bark_server="-s2 ${_bark_server}"
fi
_root_bark_title="$(echo "${_config}" | jq ".bark.title" | _remove_colon | sed 's#^null$##')"
if [ -z "${_root_bark_title}" ]; then
	_root_bark_title='Repo has changed'
fi
_root_bark_body_up="$(echo "${_config}" | jq ".bark.body.up" | _remove_colon | sed 's#^null$##')"
if [ -z "${_root_bark_body_up}" ]; then
	_root_bark_body_up='The following packages have been updated:'
fi
_root_bark_body_add="$(echo "${_config}" | jq ".bark.body.add" | _remove_colon | sed 's#^null$##')"
if [ -z "${_root_bark_body_add}" ]; then
	_root_bark_body_add='The following packages have been added:'
fi
_root_bark_body_del="$(echo "${_config}" | jq ".bark.body.del" | _remove_colon | sed 's#^null$##')"
if [ -z "${_root_bark_body_del}" ]; then
	_root_bark_body_del='The following packages have been removed:'
fi
_root_bark_level="$(echo "${_config}" | jq ".bark.level" | _remove_colon | sed 's#^null$##')"
if [ -z "${_root_bark_level}" ]; then
	_root_bark_level='active'
fi
_root_bark_is_archive="$(echo "${_config}" | jq ".bark.is_archive" | _remove_colon | sed 's#^null$##')"
if [ -z "${_root_bark_is_archive}" ]; then
	_root_bark_is_archive='0'
fi
_root_bark_group="$(echo "${_config}" | jq ".bark.group" | _remove_colon | sed 's#^null$##')"
if [ -z "${_root_bark_group}" ]; then
	_root_bark_group='com.nan.crc'
fi
_root_bark_sound="$(echo "${_config}" | jq ".bark.sound" | _remove_colon | sed 's#^null$##')"
if [ -z "${_root_bark_sound}" ]; then
	_root_bark_sound='healthnotification'
fi
_root_filter_architecture="$(echo "${_config}" | jq ".filter_architecture" | _remove_colon | sed 's#^null$##')"
if [ -z "${_root_filter_architecture}" ]; then
	_root_filter_architecture='all'
fi
_root_use_name="$(echo "${_config}" | jq ".use_name" | _remove_colon | sed 's#^null$##')"
if [ -z "${_root_use_name}" ]; then
	_root_use_name='0'
fi
echo '[*] Done'
if [ "$(echo "${_config}" | jq ".bark.Hello_World" | _remove_colon)" = '1' ]; then
	echo '[*] Hello World'
	bark -X POST ${_key} ${_bark_server} -g "${_bark_group}-helloworld" -1 'Hello World' -2 'This is a test message from crc' -i 'https://invalidunit.github.io/repo/CydiaIcon@3x.png'
fi


if echo "${_config}" | jq ".enable" | _remove_colon | grep -q '0'; then
	exit 0
fi
i='0'
i_max="$(echo "${_config}" | jq ".source|length")"
while [ "${i}" -lt "${i_max}" ]; do
	if ! echo "${_config}" | jq ".source[${i}].enable" | _remove_colon | grep -q '0'; then
		_repo="$(echo "${_config}" | jq ".source[${i}].url" | _remove_colon | sed 's#/$##')"
		_host="${_repo##*://}"
		_host="${_host%%/*}"
		echo "[*] now check \"${_repo}/\""
		echo '[*] Check this repo for custom settings...'
		if echo "${_config}" | jq ".source[${i}].bark.title" | _remove_colon | grep -q 'null'; then
			_bark_title="${_root_bark_title}"
		else
			_bark_title="$(echo "${_config}" | jq ".source[${i}].bark.title" | _remove_colon)"
		fi
		if echo "${_config}" | jq ".source[${i}].bark.body.add" | _remove_colon | grep -q 'null'; then
			_bark_body_add="${_root_bark_body_add}"
		else
			_bark_body_add="$(echo "${_config}" | jq ".source[${i}].bark.body.add" | _remove_colon)"
		fi
		if echo "${_config}" | jq ".source[${i}].bark.body.up" | _remove_colon | grep -q 'null'; then
			_bark_body_up="${_root_bark_body_up}"
		else
			_bark_body_up="$(echo "${_config}" | jq ".source[${i}].bark.body.up" | _remove_colon)"
		fi
		if echo "${_config}" | jq ".source[${i}].bark.body.del" | _remove_colon | grep -q 'null'; then
			_bark_body_del="${_root_bark_body_del}"
		else
			_bark_body_del="$(echo "${_config}" | jq ".source[${i}].bark.body.del" | _remove_colon)"
		fi
		if echo "${_config}" | jq ".source[${i}].bark.level" | _remove_colon | grep -q 'null'; then
			_bark_level="${_root_bark_level}"
		else
			_bark_level="$(echo "${_config}" | jq ".source[${i}].bark.level" | _remove_colon)"
		fi
		if echo "${_config}" | jq ".source[${i}].bark.is_archive" | _remove_colon | grep -q 'null'; then
			_bark_is_archive="${_root_bark_is_archive}"
		else
			_bark_is_archive="$(echo "${_config}" | jq ".source[${i}].bark.is_archive" | _remove_colon)"
		fi
		if echo "${_config}" | jq ".source[${i}].bark.group" | _remove_colon | grep -q 'null'; then
			_bark_group="${_root_bark_group}"
		else
			_bark_group="$(echo "${_config}" | jq ".source[${i}].bark.group" | _remove_colon)"
		fi
		if echo "${_config}" | jq ".source[${i}].bark.sound" | _remove_colon | grep -q 'null'; then
			_bark_sound="${_root_bark_sound}"
		else
			_bark_sound="$(echo "${_config}" | jq ".source[${i}].bark.sound" | _remove_colon)"
		fi
		if echo "${_config}" | jq ".source[${i}].filter_architecture" | _remove_colon | grep -q 'null'; then
			_filter_architecture="${_root_filter_architecture}"
		else
			_filter_architecture="$(echo "${_config}" | jq ".source[${i}].filter_architecture" | _remove_colon)"
		fi
		if echo "${_config}" | jq ".source[${i}].use_name" | _remove_colon | grep -q 'null'; then
			_use_name="${_root_use_name}"
		else
			_use_name="$(echo "${_config}" | jq ".source[${i}].use_name" | _remove_colon)"
		fi
		echo '[*] Done'
		echo '[*] now try to download "Packages"...'
		_package_file="${_crc_path}/$(echo "${_repo}" | sha256)"
		rm -f "${_package_file}-new" "${_package_file}-new.tmp"
		if curl --max-time 30 --write-out '%{http_code}' --silent --output /dev/null "${_repo}/Packages.zst" -H "Host: ${_host}" -H 'Sec-CH-UA: Sileo;v=2.5;t=client,unknow;t=jailbreak,procursus;t=distribution' -H "Sec-CH-UA-Model: $(uname -m)" -H 'Accept-Language: zh-CN,zh-Hans;q=0.9' -H "X-Unique-ID: 0000$(_randnum '0-9' '4')-$(_randnum '0-9' '15')E" -H 'Accept-Encoding: gzip, deflate, br' -H 'Accept: */*' -H "User-Agent: Sileo/2.5 CoreFoundation/1858.112 Darwin/$(uname -r)" -H 'Connection: keep-alive' -H 'Sec-CH-UA-Platform: iphoneos' -H "X-Machine: $(uname -m)" -H "X-Firmware: $(sw_vers -productVersion)" -H "Sec-CH-UA-Platform-Version: $(sw_vers -productVersion)" --compressed | grep -q '200'; then
			echo '[*] find "Packages.zst" file'
			curl --max-time 30 -s "${_repo}/Packages.zst" -H "Host: ${_host}" -H 'Sec-CH-UA: Sileo;v=2.5;t=client,unknow;t=jailbreak,procursus;t=distribution' -H "Sec-CH-UA-Model: $(uname -m)" -H 'Accept-Language: zh-CN,zh-Hans;q=0.9' -H "X-Unique-ID: 0000$(_randnum '0-9' '4')-$(_randnum '0-9' '15')E" -H 'Accept-Encoding: gzip, deflate, br' -H 'Accept: */*' -H "User-Agent: Sileo/2.5 CoreFoundation/1858.112 Darwin/$(uname -r)" -H 'Connection: keep-alive' -H 'Sec-CH-UA-Platform: iphoneos' -H "X-Machine: $(uname -m)" -H "X-Firmware: $(sw_vers -productVersion)" -H "Sec-CH-UA-Platform-Version: $(sw_vers -productVersion)" --compressed 1>"${_package_file}-new.zst"
			zstd -d "${_package_file}-new.zst"
			rm -f "${_package_file}-new.zst"
		elif curl --max-time 30 --write-out '%{http_code}' --silent --output /dev/null "${_repo}/Packages.xz" -H "Host: ${_host}" -H 'Sec-CH-UA: Sileo;v=2.5;t=client,unknow;t=jailbreak,procursus;t=distribution' -H "Sec-CH-UA-Model: $(uname -m)" -H 'Accept-Language: zh-CN,zh-Hans;q=0.9' -H "X-Unique-ID: 0000$(_randnum '0-9' '4')-$(_randnum '0-9' '15')E" -H 'Accept-Encoding: gzip, deflate, br' -H 'Accept: */*' -H "User-Agent: Sileo/2.5 CoreFoundation/1858.112 Darwin/$(uname -r)" -H 'Connection: keep-alive' -H 'Sec-CH-UA-Platform: iphoneos' -H "X-Machine: $(uname -m)" -H "X-Firmware: $(sw_vers -productVersion)" -H "Sec-CH-UA-Platform-Version: $(sw_vers -productVersion)" --compressed | grep -q '200'; then
			echo '[*] find "Packages.xz" file'
			curl --max-time 30 -s "${_repo}/Packages.xz" -H "Host: ${_host}" -H 'Sec-CH-UA: Sileo;v=2.5;t=client,unknow;t=jailbreak,procursus;t=distribution' -H "Sec-CH-UA-Model: $(uname -m)" -H 'Accept-Language: zh-CN,zh-Hans;q=0.9' -H "X-Unique-ID: 0000$(_randnum '0-9' '4')-$(_randnum '0-9' '15')E" -H 'Accept-Encoding: gzip, deflate, br' -H 'Accept: */*' -H "User-Agent: Sileo/2.5 CoreFoundation/1858.112 Darwin/$(uname -r)" -H 'Connection: keep-alive' -H 'Sec-CH-UA-Platform: iphoneos' -H "X-Machine: $(uname -m)" -H "X-Firmware: $(sw_vers -productVersion)" -H "Sec-CH-UA-Platform-Version: $(sw_vers -productVersion)" --compressed 1>"${_package_file}-new.xz"
			xz -d "${_package_file}-new.xz"
			rm -f "${_package_file}-new.xz"
		elif curl --max-time 30 --write-out '%{http_code}' --silent --output /dev/null "${_repo}/Packages.bz2" -H "Host: ${_host}" -H 'Sec-CH-UA: Sileo;v=2.5;t=client,unknow;t=jailbreak,procursus;t=distribution' -H "Sec-CH-UA-Model: $(uname -m)" -H 'Accept-Language: zh-CN,zh-Hans;q=0.9' -H "X-Unique-ID: 0000$(_randnum '0-9' '4')-$(_randnum '0-9' '15')E" -H 'Accept-Encoding: gzip, deflate, br' -H 'Accept: */*' -H "User-Agent: Sileo/2.5 CoreFoundation/1858.112 Darwin/$(uname -r)" -H 'Connection: keep-alive' -H 'Sec-CH-UA-Platform: iphoneos' -H "X-Machine: $(uname -m)" -H "X-Firmware: $(sw_vers -productVersion)" -H "Sec-CH-UA-Platform-Version: $(sw_vers -productVersion)" --compressed | grep -q '200'; then
			echo '[*] find "Packages.bz2" file'
			curl --max-time 30 -s "${_repo}/Packages.bz2" -H "Host: ${_host}" -H 'Sec-CH-UA: Sileo;v=2.5;t=client,unknow;t=jailbreak,procursus;t=distribution' -H "Sec-CH-UA-Model: $(uname -m)" -H 'Accept-Language: zh-CN,zh-Hans;q=0.9' -H "X-Unique-ID: 0000$(_randnum '0-9' '4')-$(_randnum '0-9' '15')E" -H 'Accept-Encoding: gzip, deflate, br' -H 'Accept: */*' -H "User-Agent: Sileo/2.5 CoreFoundation/1858.112 Darwin/$(uname -r)" -H 'Connection: keep-alive' -H 'Sec-CH-UA-Platform: iphoneos' -H "X-Machine: $(uname -m)" -H "X-Firmware: $(sw_vers -productVersion)" -H "Sec-CH-UA-Platform-Version: $(sw_vers -productVersion)" --compressed 1>"${_package_file}-new.bz2"
			bzip2 -d "${_package_file}-new.bz2"
			rm -f "${_package_file}-new.bz2"
		elif curl --max-time 30 --write-out '%{http_code}' --silent --output /dev/null "${_repo}/Packages.gz" -H "Host: ${_host}" -H 'Sec-CH-UA: Sileo;v=2.5;t=client,unknow;t=jailbreak,procursus;t=distribution' -H "Sec-CH-UA-Model: $(uname -m)" -H 'Accept-Language: zh-CN,zh-Hans;q=0.9' -H "X-Unique-ID: 0000$(_randnum '0-9' '4')-$(_randnum '0-9' '15')E" -H 'Accept-Encoding: gzip, deflate, br' -H 'Accept: */*' -H "User-Agent: Sileo/2.5 CoreFoundation/1858.112 Darwin/$(uname -r)" -H 'Connection: keep-alive' -H 'Sec-CH-UA-Platform: iphoneos' -H "X-Machine: $(uname -m)" -H "X-Firmware: $(sw_vers -productVersion)" -H "Sec-CH-UA-Platform-Version: $(sw_vers -productVersion)" --compressed | grep -q '200'; then
			echo '[*] find "Packages.gz" file'
			curl --max-time 30 -s "${_repo}/Packages.gz" -H "Host: ${_host}" -H 'Sec-CH-UA: Sileo;v=2.5;t=client,unknow;t=jailbreak,procursus;t=distribution' -H "Sec-CH-UA-Model: $(uname -m)" -H 'Accept-Language: zh-CN,zh-Hans;q=0.9' -H "X-Unique-ID: 0000$(_randnum '0-9' '4')-$(_randnum '0-9' '15')E" -H 'Accept-Encoding: gzip, deflate, br' -H 'Accept: */*' -H "User-Agent: Sileo/2.5 CoreFoundation/1858.112 Darwin/$(uname -r)" -H 'Connection: keep-alive' -H 'Sec-CH-UA-Platform: iphoneos' -H "X-Machine: $(uname -m)" -H "X-Firmware: $(sw_vers -productVersion)" -H "Sec-CH-UA-Platform-Version: $(sw_vers -productVersion)" --compressed 1>"${_package_file}-new.gz"
			gzip -d "${_package_file}-new.gz"
			rm -f "${_package_file}-new.gz"
		elif curl --max-time 30 --write-out '%{http_code}' --silent --output /dev/null "${_repo}/Packages" -H "Host: ${_host}" -H 'Sec-CH-UA: Sileo;v=2.5;t=client,unknow;t=jailbreak,procursus;t=distribution' -H "Sec-CH-UA-Model: $(uname -m)" -H 'Accept-Language: zh-CN,zh-Hans;q=0.9' -H "X-Unique-ID: 0000$(_randnum '0-9' '4')-$(_randnum '0-9' '15')E" -H 'Accept-Encoding: gzip, deflate, br' -H 'Accept: */*' -H "User-Agent: Sileo/2.5 CoreFoundation/1858.112 Darwin/$(uname -r)" -H 'Connection: keep-alive' -H 'Sec-CH-UA-Platform: iphoneos' -H "X-Machine: $(uname -m)" -H "X-Firmware: $(sw_vers -productVersion)" -H "Sec-CH-UA-Platform-Version: $(sw_vers -productVersion)" --compressed | grep -q '200'; then
			echo '[*] find "Packages" file'
			curl --max-time 30 -s "${_repo}/Packages" -H "Host: ${_host}" -H 'Sec-CH-UA: Sileo;v=2.5;t=client,unknow;t=jailbreak,procursus;t=distribution' -H "Sec-CH-UA-Model: $(uname -m)" -H 'Accept-Language: zh-CN,zh-Hans;q=0.9' -H "X-Unique-ID: 0000$(_randnum '0-9' '4')-$(_randnum '0-9' '15')E" -H 'Accept-Encoding: gzip, deflate, br' -H 'Accept: */*' -H "User-Agent: Sileo/2.5 CoreFoundation/1858.112 Darwin/$(uname -r)" -H 'Connection: keep-alive' -H 'Sec-CH-UA-Platform: iphoneos' -H "X-Machine: $(uname -m)" -H "X-Firmware: $(sw_vers -productVersion)" -H "Sec-CH-UA-Platform-Version: $(sw_vers -productVersion)" --compressed 1>"${_package_file}-new"
		else
			echo '[*] Not found any "Package" file'
		fi
		if [ -f "${_package_file}-new" ]; then
			awk -i inplace '/^Name: / { gsub(/,/, "", $0) } { print }' "${_package_file}-new"
			_parse_package "${_package_file}-new" "${_package_file}-new.csv"
			if [ "${_filter_architecture}" = 'auto' ]; then
				_filter_architecture="$(dpkg --print-architecture)"
			fi
			case "${_filter_architecture}" in
				iphoneos-arm)
					awk -F ',' '$4=="all" || $4=="iphoneos-arm"' "${_package_file}-new.csv" >"${_package_file}-new-orig.csv"
					;;
				iphoneos-arm64)
					awk -F ',' '$4=="all" || $4=="iphoneos-arm64"' "${_package_file}-new.csv" >"${_package_file}-new-orig.csv"
					;;
				iphoneos-arm64e)
					awk -F ',' '$4=="all" || $4=="iphoneos-arm64e"' "${_package_file}-new.csv" >"${_package_file}-new-orig.csv"
					;;
				*)
					mv "${_package_file}-new.csv" "${_package_file}-new-orig.csv"
					;;
			esac
			sort -k2n "${_package_file}-new-orig.csv" | uniq >"${_package_file}-new-orig2.csv"
			sort -t"," -k1,1 -k3r "${_package_file}-new-orig2.csv" | awk -F, '!a[$1]++' >"${_package_file}-new.csv"
			sed -i.tmp '1i Package,Name,Version,Architecture' "${_package_file}-new.csv"
			sed -i.tmp 's#,,#,no_name,#g' "${_package_file}-new.csv"
			awk -i inplace -F, 'BEGIN {OFS=","} $2 == "no_name" { $2 = $1 } 1' "${_package_file}-new.csv"
			rm -f "${_package_file}-new-orig.csv" "${_package_file}-new-orig2.csv" "${_package_file}-new.csv.tmp" "${_package_file}-new_"* "${_package_file}-new"
			if [ -f "${_package_file}.csv" ]; then
				echo '[*] Start analyzing "Packages" differences'
				cut -d, -f1,3 "${_package_file}.csv" >"${_package_file}"
				cut -d, -f1,3 "${_package_file}-new.csv" >"${_package_file}-new"
				if [ -z "$(diff "${_package_file}" "${_package_file}-new")" ]; then
					echo 'did not find any difference'
				else
					echo 'found some differences'
					diff -y "${_package_file}" "${_package_file}-new" | grep -E '\||>|<' >"${_package_file}.diff"
					a='1'
					a_max="$(cat "${_package_file}.diff" | wc -l)"
					rm -f "${_package_file}_diff.list.tmp"
					while [ "${a}" -le "${a_max}" ]; do
						_content="$(sed -n "${a}p" "${_package_file}.diff" | sed 's# ##g' | sed 's#	##g')"
						case "${_content}" in
							*'|'*)
								_content1="$(echo "${_content}" | awk -F '|' '{print $1}')"
								if echo "${_content1}" | grep -q ',' ; then
									echo "${_content1%%,*}" >>"${_package_file}_diff.list.tmp"
								fi
								_content2="$(echo "${_content}" | awk -F '|' '{print $2}')"
								if echo "${_content2}" | grep -q ',' ; then
									echo "${_content2%%,*}" >>"${_package_file}_diff.list.tmp"
								fi
								;;
							*'>'*)
								echo "${_content}" | sed 's#>##'| awk -F ',' '{print $1}' >>"${_package_file}_diff.list.tmp"
								;;
							*'<'*)
								echo "${_content}" | sed 's#<##'| awk -F ',' '{print $1}' >>"${_package_file}_diff.list.tmp"
								;;
						esac
						unset _content _content1 _content2
						a="$((a+1))"
					done
					sort -k2n "${_package_file}_diff.list.tmp" | uniq >"${_package_file}_diff.list"
					a='1'
					a_max="$(cat "${_package_file}_diff.list" | wc -l)"
					while [ "${a}" -le "${a_max}" ]; do
						_package="$(sed -n "${a}p" "${_package_file}_diff.list")"
						if grep -q "${_package}" "${_package_file}.csv"; then
							if grep -q "${_package}" "${_package_file}-new.csv"; then
								_version="$(awk -v package="${_package}" -F ',' '$1==package {print $3}' "${_package_file}.csv" | sed -n '1p') -> $(awk -v package="${_package}" -F ',' '$1==package {print $3}' "${_package_file}-new.csv" | sed -n '1p')"
								if [ "${_use_name}" = '1' ]; then
									_package="$(awk -v package="${_package}" -F ',' '$1==package {print $2}' "${_package_file}-new.csv" | sed -n '1p')"
								fi
								if [ -n "${_up}" ]; then
									_up="${_up}
${_package} ${_version}"
								else
									_up="${_package} ${_version}"
								fi
							else
								_version="$(awk -v package="${_package}" -F ',' '$1==package {print $3}' "${_package_file}.csv" | sed -n '1p')"
								if [ "${_use_name}" = '1' ]; then
									_package="$(awk -v package="${_package}" -F ',' '$1==package {print $2}' "${_package_file}.csv" | sed -n '1p')"
								fi
								if [ -n "${_del}" ]; then
									_del="${_del}
${_package} ${_version}"
								else
									_del="${_package} ${_version}"
								fi
							fi
						elif grep -q "${_package}" "${_package_file}-new.csv"; then
							_version="$(awk -v package="${_package}" -F ',' '$1==package {print $3}' "${_package_file}-new.csv" | sed -n '1p')"
							if [ "${_use_name}" = '1' ]; then
								_package="$(awk -v package="${_package}" -F ',' '$1==package {print $2}' "${_package_file}-new.csv" | sed -n '1p')"
							fi
							if [ -n "${_add}" ]; then
								_add="${_add}
${_package} ${_version}"
							else
								_add="${_package} ${_version}"
							fi
						else
							sleep 0
						fi
						unset _package _version
						a="$((a+1))"
					done
					if [ -n "${_up}" ]; then
						_bark_body="${_bark_body}
${_bark_body_up}
${_up}"
					fi
					if [ -n "${_add}" ]; then
						_bark_body="${_bark_body}
${_bark_body_add}
${_add}"
					fi
					if [ -n "${_del}" ]; then
						_bark_body="${_bark_body}
${_bark_body_del}
${_del}"
					fi
					if [ -n "${_bark_body}" ]; then
						_bark_body="$(echo "${_bark_body}" | sed '1d')"
						echo "${_bark_body}"
					fi
					if echo "${_config}" | jq ".source[${i}].bark.icon" | _remove_colon | grep -q 'null'; then
						echo '[*] now check repo icon'
						if curl --max-time 30 --write-out '%{http_code}' --silent --output /dev/null "${_repo}/CydiaIcon@3x.png" -H "Host: ${_host}" -H "X-Unique-ID: 0000$(_randnum '0-9' '4')-$(_randnum '0-9' '15')E" -H 'Accept: */*' -H 'Connection: keep-alive' -H 'Accept-Encoding: gzip, deflate, br' -H "User-Agent: Sileo/1 CFNetwork/1331.0.7 Darwin/$(uname -r)" --compressed | grep -q '200'; then
							_bark_icon="-i ${_repo}/CydiaIcon@3x.png"
						elif curl --max-time 30 --write-out '%{http_code}' --silent --output /dev/null "${_repo}/CydiaIcon@2x.png" -H "Host: ${_host}" -H "X-Unique-ID: 0000$(_randnum '0-9' '4')-$(_randnum '0-9' '15')E" -H 'Accept: */*' -H 'Connection: keep-alive' -H 'Accept-Encoding: gzip, deflate, br' -H "User-Agent: Sileo/1 CFNetwork/1331.0.7 Darwin/$(uname -r)" --compressed | grep -q '200'; then
							_bark_icon="-i ${_repo}/CydiaIcon@2x.png"
						elif curl --max-time 30 --write-out '%{http_code}' --silent --output /dev/null "${_repo}/CydiaIcon.png" -H "Host: ${_host}" -H "X-Unique-ID: 0000$(_randnum '0-9' '4')-$(_randnum '0-9' '15')E" -H 'Accept: */*' -H 'Connection: keep-alive' -H 'Accept-Encoding: gzip, deflate, br' -H "User-Agent: Sileo/1 CFNetwork/1331.0.7 Darwin/$(uname -r)" --compressed | grep -q '200'; then
							_bark_icon="-i ${_repo}/CydiaIcon.png"
						else
							unset _bark_icon
						fi
						echo '[*] Done'
					else
						_bark_icon="-i $(echo "${_config}" | jq ".source[${i}].bark.icon" | _remove_colon)"
					fi
					rm -f "${_package_file}.Release"
					echo '[*] now try to download "Release"...'
					if curl --max-time 30 -s "${_repo}/Release" -H "Host: ${_host}" -H 'Sec-CH-UA: Sileo;v=2.5;t=client,unknow;t=jailbreak,procursus;t=distribution' -H "Sec-CH-UA-Model: $(uname -m)" -H 'Accept-Language: zh-CN,zh-Hans;q=0.9' -H "X-Unique-ID: 0000$(_randnum '0-9' '4')-$(_randnum '0-9' '15')E" -H 'Accept-Encoding: gzip, deflate, br' -H 'Accept: */*' -H "User-Agent: Sileo/2.5 CoreFoundation/1858.112 Darwin/$(uname -r)" -H 'Connection: keep-alive' -H 'Sec-CH-UA-Platform: iphoneos' -H "X-Machine: $(uname -m)" -H "X-Firmware: $(sw_vers -productVersion)" -H "Sec-CH-UA-Platform-Version: $(sw_vers -productVersion)" --compressed 1>"${_package_file}.Release"; then
						_origin="$(cat "${_package_file}.Release" | grep 'Origin' | sed -n '1p')"
						_origin="${_origin#*: }"
					else
						unset _origin
						echo 'Download file "Release" Failure'
					fi
					if [ -z "${_origin}" ]; then
						_origin="${_repo}/"
					fi
					echo "${_bark_body}" | bark -X POST ${_key} ${_bark_server} -g "${_bark_group}" -1 "$(echo "${_bark_title}" | sed "s#repo_name#${_origin}#g")" -l "${_bark_level}" -i2 "${_bark_is_archive}" -s "${_bark_sound}" ${_bark_icon}
				fi
				rm -f "${_package_file}.csv"
				mv "${_package_file}-new.csv" "${_package_file}.csv"
			else
				mv "${_package_file}-new.csv" "${_package_file}.csv"
				echo '[*] The Packages file has been cached'
			fi
		else
			echo '[x] Error: The downloaded file is corrupt or the download failed...'
		fi
		rm -f "${_package_file}.diff" "${_package_file}.diff2" "${_package_file}-new.tmp" "${_package_file}.up.tmp" "${_package_file}.up" "${_package_file}.add.tmp" "${_package_file}.add" "${_package_file}.del.tmp" "${_package_file}.del" "${_package_file}.Release" "${_package_file}" "${_package_file}-new" "${_package_file}_diff.list" "${_package_file}_diff.list.tmp"
	fi
	unset _bark_title _bark_body _bark_body_up _bark_body_add _bark_body_del _bark_group _bark_level _bark_is_archive _bark_sound _bark_icon _host _origin _up _add _del _package _version _filter_architecture _use_name
	i="$((i+1))"
done
